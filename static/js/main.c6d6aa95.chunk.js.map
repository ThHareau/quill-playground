{"version":3,"sources":["Components/Blots/HighlightBlot.js","Components/Modules/Searcher.js","Components/RichTextViewer.js","Components/Variables.js","Services/i18n.js","Components/Blots/VariableBlot.js","Components/Blots/InputBlot.js","Components/Modules/EmbedSelector.js","Components/TemplateEditor.js","Components/Modules/TabNavigator.js","Components/RenderedEditor.js","App.js","index.js"],"names":["HighlightBlot","value","node","contentEditable","Quill","import","blotName","className","tagName","Searcher","quill","this","totalText","getText","regexp","RegExp","Array","from","matchAll","map","match","index","length","findMatches","forEach","formatText","register","formats","RichTextViewer","text","search","ref","useRef","useEffect","current","getEditor","getModule","readOnly","theme","modules","searcher","Variable","name","onValueNameChange","style","display","alignItems","flex","htmlFor","type","id","onChange","change","target","variables","setVariables","setVariable","variable","displayName","key","onDisplayNameChange","update","window","translations","VariableBlot","def","Object","keys","setAttribute","innerText","domNode","getAttribute","InputBlot","input","attribute","Parchment","EmbedSelector","options","root","addEventListener","ev","find","blots","blot","action","setSelection","offset","scroll","sources","USER","forwardRef","forwardedRef","editorRef","quillAction","range","getSelection","insertEmbed","SILENT","useImperativeHandle","embedSelector","TabNavigator","keyboard","bindings","unshift","handler","leaf","findNextBlotOfType","firstIndex","getLeaf","getValue","variableName","replaceVariables","delta","ops","op","insert","replaceVariablesInInsert","template","useState","shouldRerenderVariables","setShouldRerenderVariables","editor","getContents","updatedDelta","setContents","API","tabNavigator","VariablesPanel","onVariableClicked","filter","onClick","InputsPanel","onInputClicked","prompt","Date","now","setTemplate","setText","setSearch","Variables","RenderedEditor","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6d6aa95.chunk.js","sourcesContent":["import {Quill} from 'react-quill'\n\nconst Inline = Quill.import(\"blots/inline\");\n\nclass HighlightBlot extends Inline {\n  static create(value) {\n    const node = super.create(value);\n    node.contentEditable = \"false\";\n    return node;\n  }\n}\n\nHighlightBlot.blotName = 'highlight';\nHighlightBlot.className = 'ql-highlight';\nHighlightBlot.tagName = 'mark';\n\nexport default HighlightBlot;\n","export class Searcher {\n    constructor(quill) {\n        this.quill = quill;\n    }\n\n    findMatches(value) {\n        const totalText = this.quill.getText();\n\n        const regexp = RegExp(value, 'gi');\n\n        return Array.from(totalText.matchAll(regexp)).map((match) => ({\n            index: match.index,\n            length: match[0].length\n        }))\n    }\n\n    search(value) {\n        //  remove any previous search\n        if (value) {\n            const matches = this.findMatches(value)\n            matches.forEach(({index, length}) => {\n                this.quill.formatText(index, length, 'highlight', true)\n            })\n        }\n    }\n}\n","import ReactQuill, {Quill} from 'react-quill'\nimport React, {useEffect, useRef} from 'react'\nimport HighlightBlot from './Blots/HighlightBlot'\nimport { Searcher } from \"./Modules/Searcher\";\n\nQuill.register(\"modules/searcher\", Searcher);\nQuill.register(HighlightBlot);\n\nconst formats = [\"bold\", \"list\", \"italic\", \"highlight\"] // add custom format name + any built-in formats you need\n\nconst RichTextViewer = ({text, search}) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    const quill = ref.current?.getEditor()\n    const searcher = quill.getModule('searcher')\n    searcher.search(search)\n  }, [search])\n\n  return <ReactQuill ref={ref} value={text} readOnly theme={null} formats={formats} modules={{ searcher: true }}/>\n}\n\nexport default RichTextViewer\n","import React from 'react'\n\nconst Variable = ({name, value, onValueNameChange}) => (\n  <div style={{display: 'flex', alignItems: 'center'}}>\n    <label style={{flex: 1}} htmlFor={name}>{name}: </label>\n\n    <input type=\"text\" value={value} style={{flex: 2}} id={name}\n           onChange={({target: {value: change}}) => onValueNameChange(change)}/>\n  </div>\n)\n\nexport default ({variables, setVariables}) => {\n  const setVariable = (name, value) => {\n    setVariables(variables.map((variable) => variable.name === name ? {...variable, name, ...value} : variable))\n  }\n\n  return (<form>\n    {variables.map(({name, value, displayName}) => (\n      <Variable\n        name={name}\n        value={value}\n        key={name}\n        displayName={displayName}\n        onDisplayNameChange={(update) => setVariable(name, {value, displayName: update})}\n        onValueNameChange={(update) => setVariable(name, {displayName, value: update})}\n      />))}\n  </form>)\n}\n","if (!window.translations) {\n  window.translations = {\n    'last-name': 'Nom',\n    'first-name': 'Prénom',\n  }\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const t = (key, def) => window.translations[key] || (def == null ? key : def)\n","import {Quill} from 'react-quill'\nimport {t} from '../../Services/i18n'\n\nconst InlineEmbed = Quill.import('blots/embed');\n\nexport default class VariableBlot extends InlineEmbed {\n  static create(variable) {\n    const node = super.create(variable);\n\n    Object.keys(variable).forEach((key) => {\n      node.setAttribute(`data-${key}`, variable[key]);\n    })\n\n    node.innerText = t(variable.name)\n\n    return node\n  }\n\n  static value(domNode) {\n    return {name: domNode.getAttribute(`data-name`)}\n  }\n}\n\nVariableBlot.blotName = 'variable';\nVariableBlot.tagName = 'span';\nVariableBlot.className = 'ql-variable'\n","import {Quill} from 'react-quill'\n\nconst InlineEmbed = Quill.import('blots/embed');\n\nexport default class InputBlot extends InlineEmbed {\n    static create(input) {\n        const node = super.create(input);\n\n        const {name, displayName} = input\n\n        node.setAttribute('data-name', name);\n        node.setAttribute('data-display-name', displayName);\n\n        node.innerText = displayName\n\n        return node\n    }\n\n    static value(domNode) {\n        const getAttribute = (attribute) => domNode.getAttribute(`data-${attribute}`)\n        return {name: getAttribute('name'), displayName: getAttribute('display-name')}\n    }\n}\n\nInputBlot.blotName = 'input';\nInputBlot.tagName = 'span';\nInputBlot.className = 'ql-input'\n","import {Quill} from 'react-quill'\n\nconst Parchment = Quill.import('parchment')\n\nexport default class EmbedSelector {\n  constructor(quill, options) {\n    quill.root.addEventListener('click', (ev) => {\n      const input = Parchment.find(ev.target, true);\n\n      if (options.blots?.find((blot) => input instanceof blot)) {\n        switch (options.action) {\n          case 'right':\n            return quill.setSelection(input.offset(quill.scroll) + 1, Quill.sources.USER);\n          case 'select':\n          default:\n            return quill.setSelection(input.offset(quill.scroll), 1, Quill.sources.USER);\n        }\n      }\n    });\n  }\n}\n\n","import React, {forwardRef, useImperativeHandle, useRef} from \"react\";\nimport ReactQuill, {Quill} from 'react-quill'\nimport 'react-quill/dist/quill.snow.css';\nimport './editor.css'\nimport VariableBlot from './Blots/VariableBlot'\nimport InputBlot from './Blots/InputBlot'\nimport EmbedSelector from './Modules/EmbedSelector'\n\n\nQuill.register('blots/embed', VariableBlot);\nQuill.register('blots/embed', InputBlot);\nQuill.register('modules/embedSelector', EmbedSelector);\n\nconst formats = [\"variable\", \"bold\", 'input', \"list\", \"header\"] // add custom format name + any built-in formats you need\n\nconst TemplateEditor = ({text, onChange}, forwardedRef) => {\n  const editorRef = useRef()\n\n  const quillAction = (type) => (value) => {\n    const quill = editorRef.current.getEditor()\n    const range = quill.getSelection(true)\n\n    quill.insertEmbed(range.index, type, value, Quill.sources.USER)\n    quill.setSelection(range.index + 1, Quill.sources.SILENT)\n  }\n\n  useImperativeHandle(forwardedRef, () => ({\n    variable: quillAction('variable'),\n    input: quillAction('input')\n  }))\n\n  return (\n    <ReactQuill theme=\"snow\" value={text} onChange={onChange} formats={formats} ref={editorRef} modules={{\n      embedSelector: {\n        blots: [InputBlot, VariableBlot],\n        action: 'right',\n      }\n    }\n    }/>\n  );\n}\n\nexport default forwardRef(TemplateEditor)\n","import {Quill} from 'react-quill'\nimport InputBlot from '../Blots/InputBlot'\n\nexport default class TabNavigator {\n  constructor(quill) {\n    this.quill = quill\n    quill.keyboard.bindings[9].unshift({\n      key: 9,\n      handler: ({index, length}) => {\n        const leaf = this.findNextBlotOfType([InputBlot], index + length + 1)\n\n        if (leaf) {\n          quill.setSelection(leaf.offset(quill.scroll), 1, Quill.sources.USER)\n          return false\n        }\n\n        return true\n      }\n    })\n  }\n\n  findNextBlotOfType(blots, firstIndex = 0) {\n    const [leaf] = this.quill.getLeaf(firstIndex)\n\n    if (!leaf) return leaf\n\n    if (blots.find((blot) => leaf instanceof blot)) {\n      return leaf\n    }\n\n    return this.findNextBlotOfType(blots, firstIndex + 1)\n  }\n}\n","import React, {useEffect, useRef, useState} from 'react'\nimport ReactQuill, {Quill} from 'react-quill'\nimport 'react-quill/dist/quill.snow.css';\nimport VariableBlot from './Blots/VariableBlot'\nimport InputBlot from './Blots/InputBlot'\nimport EmbedSelector from './Modules/EmbedSelector'\nimport TabNavigator from './Modules/TabNavigator'\n\nconst getValue = (variableName, variables) => variables.find(({name}) => name === variableName)?.value || `[NODEF ${variableName}]`\n\nconst replaceVariablesInInsert = (op, variables) => {\n  if (!op.insert) return op\n\n  const {insert} = op\n  if (insert.variable)\n    return {...op, insert: getValue(insert.variable.name, variables)}\n\n  return op\n}\n\nconst replaceVariables = (delta, variables) => {\n  const {ops} = delta\n\n  return {\n    ...delta,\n    ops: ops.map((op) => replaceVariablesInInsert(op, variables))\n  }\n}\n\nQuill.register('blots/embed', VariableBlot);\nQuill.register('blots/embed', InputBlot);\nQuill.register('modules/embedSelector', EmbedSelector);\nQuill.register('modules/tabNavigator', TabNavigator);\n\nconst formats = [\"variable\", \"bold\", 'input', \"list\", \"header\"] // add custom format name + any built-in formats you need\n\nexport default ({text, onChange, template, variables}) => {\n  const ref = useRef()\n\n  const [shouldRerenderVariables, setShouldRerenderVariables] = useState(true)\n\n  useEffect(() => {\n    onChange(template)\n    setShouldRerenderVariables(true)\n  }, [template, onChange, variables])\n\n  useEffect(() => {\n    if (!shouldRerenderVariables) return\n    if (!ref.current) return\n\n    const editor = ref.current.getEditor()\n    const delta = editor.getContents()\n    const updatedDelta = replaceVariables(delta, variables)\n\n    setShouldRerenderVariables(false)\n    editor.setContents(updatedDelta, Quill.sources.API)\n  }, [text, shouldRerenderVariables, variables])\n\n\n  return <ReactQuill theme=\"snow\" value={text} onChange={onChange} formats={formats} ref={ref} modules={\n    {\n      embedSelector: {\n        blots: [InputBlot],\n        action: 'select',\n      },\n      tabNavigator: {\n        blots: [InputBlot],\n      },\n    }\n  }/>\n}\n","import React, {useRef, useState} from 'react';\nimport './App.css';\nimport RichTextViewer from './Components/RichTextViewer'\nimport Variables from './Components/Variables'\nimport TemplateEditor from './Components/TemplateEditor'\nimport RenderedEditor from './Components/RenderedEditor'\n\nconst VariablesPanel = ({variables, onVariableClicked}) => (\n  <>\n    <h3>Variables</h3>\n    {variables.filter(({value}) => !!value)\n      .map((variable) =>\n        <button\n          type=\"button\"\n          key={variable.name}\n          onClick={() => onVariableClicked(variable)}\n        >\n          {variable.name}\n        </button>\n      )\n    }\n  </>\n)\n\nconst InputsPanel = ({onInputClicked}) => (\n  <>\n    <h3>Inputs</h3>\n    <button type=\"button\" onClick={() => {\n      // eslint-disable-next-line no-alert\n      const displayName = prompt('Display name of your input?')\n      const name = Date.now()\n      onInputClicked({displayName, name})\n    }}>New input\n    </button>\n  </>\n)\n\nexport default () => {\n  const ref = useRef()\n  const [variables, setVariables] = useState([\n    {\n      name: 'last-name',\n      value: 'Doe',\n    },\n    {\n      name: 'first-name',\n      value: 'Joan',\n    }\n  ])\n  const [template, setTemplate] = useState('')\n  const [text, setText] = useState(template)\n  const [search, setSearch] = useState('')\n\n  return (<div className=\"App\">\n    <div className=\"variableEditorView\">\n      <Variables variables={variables} setVariables={setVariables}/>\n    </div>\n    <div className=\"row\">\n      <div className=\"templateView\">\n        <h3>Quill</h3>\n        <TemplateEditor text={template} onChange={setTemplate} ref={ref}/>\n      </div>\n      <div className=\"row column variableView\">\n        <VariablesPanel\n          variables={variables}\n          onVariableClicked={(variableName) => ref.current.variable(variableName)}\n        />\n        <InputsPanel onInputClicked={ref.current?.input}/>\n      </div>\n    </div>\n\n    <div className=\"row\">\n      <div className=\"viewer\">\n        <h2>Result</h2>\n\n        <div>\n          <RenderedEditor template={template} text={text} onChange={setText} variables={variables}/>\n        </div>\n      </div>\n      <div className=\"viewer\">\n\n        <h2>Rich text viewer</h2>\n        <input placeholder=\"Search a word\" onChange={({target: {value}}) => setSearch(value)} value={search}/>\n        <div>\n          <RichTextViewer text={text} search={search}/>\n        </div>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"viewer\">\n        <h2>Text result</h2>\n        <div>\n          {text}\n        </div>\n      </div>\n\n      <div className=\"viewer\">\n        <h2>Template result</h2>\n        <div>\n          {template}\n        </div>\n      </div>\n    </div>\n  </div>);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}