{"version":3,"sources":["Components/Variables.js","Services/i18n.js","Components/Blots/VariableBlot.js","Components/Blots/InputBlot.js","Components/Modules/EmbedSelector.js","Components/TemplateEditor.js","Components/Modules/TabNavigator.js","Components/RenderedEditor.js","App.js","index.js"],"names":["Variable","name","value","onValueNameChange","style","display","alignItems","flex","htmlFor","type","id","onChange","change","target","variables","setVariables","setVariable","map","variable","displayName","key","onDisplayNameChange","update","window","translations","VariableBlot","def","node","Object","keys","forEach","setAttribute","innerText","domNode","getAttribute","Quill","import","blotName","tagName","className","InputBlot","input","attribute","Parchment","EmbedSelector","quill","options","root","addEventListener","ev","find","blots","blot","action","setSelection","offset","scroll","sources","USER","register","formats","forwardRef","forwardedRef","text","editorRef","useRef","quillAction","current","getEditor","range","getSelection","insertEmbed","index","SILENT","useImperativeHandle","theme","ref","modules","embedSelector","TabNavigator","this","keyboard","bindings","unshift","handler","length","leaf","findNextBlotOfType","firstIndex","getLeaf","getValue","variableName","replaceVariables","delta","ops","op","insert","replaceVariablesInInsert","template","useState","shouldRerenderVariables","setShouldRerenderVariables","useEffect","editor","getContents","updatedDelta","setContents","API","tabNavigator","VariablesPanel","onVariableClicked","filter","onClick","InputsPanel","onInputClicked","prompt","Date","now","setTemplate","setText","Variables","RenderedEditor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee7f0d6f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Variable = ({name, value, onValueNameChange}) => (\n  <div style={{display: 'flex', alignItems: 'center'}}>\n    <label style={{flex: 1}} htmlFor={name}>{name}: </label>\n\n    <input type=\"text\" value={value} style={{flex: 2}} id={name}\n           onChange={({target: {value: change}}) => onValueNameChange(change)}/>\n  </div>\n)\n\nexport default ({variables, setVariables}) => {\n  const setVariable = (name, value) => {\n    setVariables(variables.map((variable) => variable.name === name ? {...variable, name, ...value} : variable))\n  }\n\n  return (<form>\n    {variables.map(({name, value, displayName}) => (\n      <Variable\n        name={name}\n        value={value}\n        key={name}\n        displayName={displayName}\n        onDisplayNameChange={(update) => setVariable(name, {value, displayName: update})}\n        onValueNameChange={(update) => setVariable(name, {displayName, value: update})}\n      />))}\n  </form>)\n}\n","if (!window.translations) {\n  window.translations = {\n    'last-name': 'Nom',\n    'first-name': 'PrÃ©nom',\n  }\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const t = (key, def) => window.translations[key] || (def == null ? key : def)\n","import {Quill} from 'react-quill'\nimport {t} from '../../Services/i18n'\n\nconst InlineEmbed = Quill.import('blots/embed');\n\nexport default class VariableBlot extends InlineEmbed {\n  static create(variable) {\n    const node = super.create(variable);\n\n    Object.keys(variable).forEach((key) => {\n      node.setAttribute(`data-${key}`, variable[key]);\n    })\n\n    node.innerText = t(variable.name)\n\n    return node\n  }\n\n  static value(domNode) {\n    return {name: domNode.getAttribute(`data-name`)}\n  }\n}\n\nVariableBlot.blotName = 'variable';\nVariableBlot.tagName = 'span';\nVariableBlot.className = 'ql-variable'\n","import {Quill} from 'react-quill'\n\nconst InlineEmbed = Quill.import('blots/embed');\n\nexport default class InputBlot extends InlineEmbed {\n    static create(input) {\n        const node = super.create(input);\n\n        const {name, displayName} = input\n\n        node.setAttribute('data-name', name);\n        node.setAttribute('data-display-name', displayName);\n\n        node.innerText = displayName\n\n        return node\n    }\n\n    static value(domNode) {\n        const getAttribute = (attribute) => domNode.getAttribute(`data-${attribute}`)\n        return {name: getAttribute('name'), displayName: getAttribute('display-name')}\n    }\n}\n\nInputBlot.blotName = 'input';\nInputBlot.tagName = 'span';\nInputBlot.className = 'ql-input'\n","import {Quill} from 'react-quill'\n\nconst Parchment = Quill.import('parchment')\n\nexport default class EmbedSelector {\n  constructor(quill, options) {\n    quill.root.addEventListener('click', (ev) => {\n      const input = Parchment.find(ev.target, true);\n\n      if (options.blots?.find((blot) => input instanceof blot)) {\n        switch (options.action) {\n          case 'right':\n            return quill.setSelection(input.offset(quill.scroll) + 1, Quill.sources.USER);\n          case 'select':\n          default:\n            return quill.setSelection(input.offset(quill.scroll), 1, Quill.sources.USER);\n        }\n      }\n    });\n  }\n}\n\n","import React, {forwardRef, useImperativeHandle, useRef} from \"react\";\nimport ReactQuill, {Quill} from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport './editor.css'\nimport VariableBlot from './Blots/VariableBlot'\nimport InputBlot from './Blots/InputBlot'\nimport EmbedSelector from './Modules/EmbedSelector'\n\nQuill.register('blots/embed', VariableBlot);\nQuill.register('blots/embed', InputBlot);\nQuill.register('modules/embedSelector', EmbedSelector);\n\nconst formats = [\"variable\", \"bold\", 'input', \"list\"] // add custom format name + any built-in formats you need\n\nconst TemplateEditor = ({text, onChange}, forwardedRef) => {\n  const editorRef = useRef()\n\n  const quillAction = (type) => (value) => {\n    const quill = editorRef.current.getEditor()\n    const range = quill.getSelection(true)\n\n    quill.insertEmbed(range.index, type, value, Quill.sources.USER)\n    quill.setSelection(range.index + 1, Quill.sources.SILENT)\n  }\n\n  useImperativeHandle(forwardedRef, () => ({\n    variable: quillAction('variable'),\n    input: quillAction('input')\n  }))\n\n  return (\n    <ReactQuill theme=\"snow\" value={text} onChange={onChange} formats={formats} ref={editorRef} modules={{\n      embedSelector: {\n        blots: [InputBlot, VariableBlot],\n        action: 'right',\n      }\n    }\n    }/>\n  );\n}\n\nexport default forwardRef(TemplateEditor)\n","import {Quill} from 'react-quill'\nimport InputBlot from '../Blots/InputBlot'\n\nexport default class TabNavigator {\n  constructor(quill) {\n    this.quill = quill\n    quill.keyboard.bindings[9].unshift({\n      key: 9,\n      handler: ({index, length}) => {\n        const leaf = this.findNextBlotOfType([InputBlot], index + length + 1)\n\n        if (leaf) {\n          quill.setSelection(leaf.offset(quill.scroll), 1, Quill.sources.USER)\n          return false\n        }\n\n        return true\n      }\n    })\n  }\n\n  findNextBlotOfType(blots, firstIndex = 0) {\n    const [leaf] = this.quill.getLeaf(firstIndex)\n\n    if (!leaf) return leaf\n\n    if (blots.find((blot) => leaf instanceof blot)) {\n      return leaf\n    }\n\n    return this.findNextBlotOfType(blots, firstIndex + 1)\n  }\n}\n","import React, {useEffect, useRef, useState} from 'react'\nimport ReactQuill, {Quill} from 'react-quill'\nimport 'react-quill/dist/quill.snow.css';\nimport VariableBlot from './Blots/VariableBlot'\nimport InputBlot from './Blots/InputBlot'\nimport EmbedSelector from './Modules/EmbedSelector'\nimport TabNavigator from './Modules/TabNavigator'\n\nconst getValue = (variableName, variables) => variables.find(({name}) => name === variableName)?.value || `[NODEF ${variableName}]`\n\nconst replaceVariablesInInsert = (op, variables) => {\n  if (!op.insert) return op\n\n  const {insert} = op\n  if (insert.variable)\n    return {...op, insert: getValue(insert.variable.name, variables)}\n\n  return op\n}\n\nconst replaceVariables = (delta, variables) => {\n  const {ops} = delta\n\n  return {\n    ...delta,\n    ops: ops.map((op) => replaceVariablesInInsert(op, variables))\n  }\n}\n\nQuill.register('blots/embed', VariableBlot);\nQuill.register('blots/embed', InputBlot);\nQuill.register('modules/embedSelector', EmbedSelector);\nQuill.register('modules/tabNavigator', TabNavigator);\n\nconst formats = [\"variable\", \"bold\", 'input', \"list\"] // add custom format name + any built-in formats you need\n\nexport default ({text, onChange, template, variables}) => {\n  const ref = useRef()\n\n  const [shouldRerenderVariables, setShouldRerenderVariables] = useState(true)\n\n  useEffect(() => {\n    onChange(template)\n    setShouldRerenderVariables(true)\n  }, [template, onChange, variables])\n\n  useEffect(() => {\n    if (!shouldRerenderVariables) return\n    if (!ref.current) return\n\n    const editor = ref.current.getEditor()\n    const delta = editor.getContents()\n    const updatedDelta = replaceVariables(delta, variables)\n\n    setShouldRerenderVariables(false)\n    editor.setContents(updatedDelta, Quill.sources.API)\n  }, [text, shouldRerenderVariables, variables])\n\n\n  return <ReactQuill theme=\"snow\" value={text} onChange={onChange} formats={formats} ref={ref} modules={\n    {\n      embedSelector: {\n        blots: [InputBlot],\n        action: 'select',\n      },\n      tabNavigator: {\n        blots: [InputBlot],\n      },\n    }\n  }/>\n}\n","import React, {useRef, useState} from 'react';\nimport './App.css';\nimport Variables from './Components/Variables'\nimport TemplateEditor from './Components/TemplateEditor'\nimport RenderedEditor from './Components/RenderedEditor'\n\nconst VariablesPanel = ({variables, onVariableClicked}) => (\n  <>\n    <h3>Variables</h3>\n    {variables.filter(({value}) => !!value)\n      .map((variable) =>\n        <button\n          type=\"button\"\n          key={variable.name}\n          onClick={() => onVariableClicked(variable)}\n        >\n          {variable.name}\n        </button>\n      )\n    }\n  </>\n)\n\nconst InputsPanel = ({onInputClicked}) => (\n  <>\n    <h3>Inputs</h3>\n    <button type=\"button\" onClick={() => {\n      // eslint-disable-next-line no-alert\n      const displayName = prompt('Display name of your input?')\n      const name = Date.now()\n      onInputClicked({displayName, name})\n    }}>New input\n    </button>\n  </>\n)\n\nexport default () => {\n    const ref = useRef()\n    const [variables, setVariables] = useState([\n        {\n            name: 'last-name',\n            value: 'Doe',\n        },\n        {\n            name: 'first-name',\n            value: 'Joan',\n        }\n    ])\n    const [template, setTemplate] = useState('')\n    const [text, setText] = useState(template)\n\n    return (<div className=\"App\">\n        <div className=\"variableEditorView\">\n            <Variables variables={variables} setVariables={setVariables}/>\n        </div>\n        <div className=\"row\">\n            <div className=\"templateView\">\n                <h3>Quill</h3>\n                <TemplateEditor text={template} onChange={setTemplate} ref={ref}/>\n            </div>\n            <div className=\"row column variableView\">\n              <VariablesPanel\n                variables={variables}\n                onVariableClicked={(variableName) => ref.current.variable(variableName)}\n              />\n              <InputsPanel onInputClicked={ref.current?.input}/>\n            </div>\n        </div>\n\n        <div>\n            <h2>Result</h2>\n            <div>\n                <RenderedEditor template={template} text={text} onChange={setText} variables={variables}/>\n            </div>\n        </div>\n\n        <div>\n            <h2>Text result</h2>\n            <div>\n                {text}\n            </div>\n        </div>\n\n        <div>\n            <h2>Template result</h2>\n            <div>\n                {template}\n            </div>\n        </div>\n    </div>);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}